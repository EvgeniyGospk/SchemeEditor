var p=Object.defineProperty;var l=(r,n,t)=>n in r?p(r,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[n]=t;var a=(r,n,t)=>l(r,typeof n!="symbol"?n+"":n,t);import{v as m,a as I,L as o}from"./index-DKNJtNe6.js";import{DefaultState as s}from"./DefaultState-B1tIFoJh.js";import"./DeleteElementCommand-qGrwhnDa.js";class h{constructor(n,t){a(this,"scheme");a(this,"lineProperties");a(this,"createdLine",null);a(this,"lineId");this.scheme=n,this.lineProperties=t,this.lineId=m()}execute(){if(this.createdLine){this.scheme.addLine(this.createdLine);return}this.createdLine=new I({id:this.lineId,fromShapeId:this.lineProperties.fromShapeId,fromConnectionPointId:this.lineProperties.fromConnectionPointId,toShapeId:this.lineProperties.toShapeId,toConnectionPointId:this.lineProperties.toConnectionPointId,strokeColor:"#000000",strokeWidth:2,zIndex:0}),this.scheme.addLine(this.createdLine),this.scheme.notifyObservers()}undo(){this.createdLine&&this.scheme.removeLine(this.createdLine.id),this.scheme.notifyObservers()}}class w{constructor(){a(this,"startShapeId");a(this,"startConnectionPointId");a(this,"isInitializedFromConnectionPoint",!1)}getStateName(){return"DrawingLineState"}onEnterState(n,t){if(o.info("DrawingLineState: Entered"),typeof window<"u"&&window.__appController){const e=window.__appController.getKonvaStage();if(e){const i=e.container();i&&(i.style.cursor="crosshair")}}this.startShapeId=void 0,this.startConnectionPointId=void 0,this.isInitializedFromConnectionPoint=!1,t?(this.startShapeId=t.fromShapeId,this.startConnectionPointId=t.fromPointId,this.isInitializedFromConnectionPoint=!0,o.info("DrawingLineState: Started line drawing from connection point",{fromShapeId:t.fromShapeId,fromPointId:t.fromPointId})):o.info("DrawingLineState: Entered without initial connection point")}onExitState(){if(o.info("DrawingLineState: Exited"),typeof window<"u"&&window.__appController){const n=window.__appController.getKonvaStage();if(n){const t=n.container();t&&(t.style.cursor="default")}}this.startShapeId=void 0,this.startConnectionPointId=void 0,this.isInitializedFromConnectionPoint=!1}handleMouseDown(n,t){const{target:e}=n;if(this.isInitializedFromConnectionPoint&&this.startShapeId){if(e&&(this.isShapeTarget(e)||this.isConnectionPointTarget(e))){const i=this.getShapeIdFromTarget(e);if(i&&i!==this.startShapeId){let d="center";this.isConnectionPointTarget(e)&&(d=this.getConnectionPointIdFromTarget(e)||"center");const c=t.getDependencies(),f=new h(c.scheme,{fromShapeId:this.startShapeId,fromConnectionPointId:this.startConnectionPointId,toShapeId:i,toConnectionPointId:d});c.commandManager.executeCommand(f),o.info(`DrawingLineState: Created line from ${this.startShapeId}:${this.startConnectionPointId} to ${i}:${d}`),t.setState(new s)}else o.info("DrawingLineState: Cannot connect to the same shape, exiting drawing mode"),t.setState(new s)}else o.info("DrawingLineState: Clicked on empty space, canceling line drawing"),t.setState(new s);return}if(!this.startShapeId)if(e&&(this.isShapeTarget(e)||this.isConnectionPointTarget(e))){const i=this.getShapeIdFromTarget(e);i&&(this.startShapeId=i,this.isConnectionPointTarget(e)?this.startConnectionPointId=this.getConnectionPointIdFromTarget(e)||"center":this.startConnectionPointId="center",o.info(`DrawingLineState: Selected start point - shape ${i}, point ${this.startConnectionPointId}`))}else o.info("DrawingLineState: Please click on a shape or connection point to start drawing a line")}handleMouseMove(){}handleMouseUp(){}handleDoubleClick(n,t){o.info("DrawingLineState: Double click, canceling line drawing"),t.setState(new s)}handleKeyDown(n,t){switch(n.key){case"Escape":o.info("DrawingLineState: Escape pressed, canceling line drawing"),t.setState(new s);break}}handleKeyUp(){}isShapeTarget(n){return n!=null&&typeof n=="object"&&"attrs"in n}isConnectionPointTarget(n){const t=n;if(t.name&&typeof t.name=="function"){const e=t.name();return typeof e=="string"&&e.startsWith("connection-point-")}return!1}getConnectionPointIdFromTarget(n){const t=n;if(t.name&&typeof t.name=="function"){const e=t.name();if(typeof e=="string"&&e.startsWith("connection-point-"))return e.replace("connection-point-","")}return null}getShapeIdFromTarget(n){const t=n;if(this.isConnectionPointTarget(n)){let e=t.parent;for(;e;){if(e.name&&typeof e.name=="function"){const i=e.name();if(typeof i=="string"&&!i.startsWith("connection-point-"))return i}if(e.id){if(typeof e.id=="string")return e.id;if(typeof e.id=="function"){const i=e.id();return typeof i=="string"?i:null}}e=e.parent}}if(t.id){if(typeof t.id=="string")return t.id;if(typeof t.id=="function"){const e=t.id();return typeof e=="string"?e:null}}if(t.name&&typeof t.name=="function"){const e=t.name();return typeof e=="string"?e:null}if(t.attrs){if(t.attrs.shapeId&&typeof t.attrs.shapeId=="string")return t.attrs.shapeId;if(t.attrs.id&&typeof t.attrs.id=="string")return t.attrs.id}return null}getLinePreview(){return null}finishLineToConnectionPoint(n,t,e){if(!this.startShapeId||!this.startConnectionPointId){o.warn("DrawingLineState: Cannot finish line - no start point defined");return}if(n===this.startShapeId){o.info("DrawingLineState: Cannot connect shape to itself");return}const i=e.getDependencies(),d=new h(i.scheme,{fromShapeId:this.startShapeId,fromConnectionPointId:this.startConnectionPointId,toShapeId:n,toConnectionPointId:t});i.commandManager.executeCommand(d),o.info(`DrawingLineState: Created line from ${this.startShapeId}:${this.startConnectionPointId} to ${n}:${t}`),e.setState(new s)}}export{w as DrawingLineState};
