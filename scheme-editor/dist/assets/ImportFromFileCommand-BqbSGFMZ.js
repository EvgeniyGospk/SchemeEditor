var p=Object.defineProperty;var S=(o,e,t)=>e in o?p(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var s=(o,e,t)=>S(o,typeof e!="symbol"?e+"":e,t);import{S as f,L as m}from"./index-DLCka8Hw.js";class g{constructor(e,t,a,i){s(this,"currentScheme");s(this,"shapeFactory");s(this,"mementoForUndo",null);s(this,"onSuccess");s(this,"onError");this.currentScheme=e,this.shapeFactory=t,this.onSuccess=a,this.onError=i}execute(){const e=document.createElement("input");e.type="file",e.accept=".json",e.style.display="none",e.onchange=t=>{var d;const a=(d=t.target.files)==null?void 0:d[0];if(!a)return;const i=new FileReader;i.onload=h=>{var c,l,u;try{this.mementoForUndo=this.currentScheme.createMemento();const r=JSON.parse((c=h.target)==null?void 0:c.result);if(!r.id||!r.name||!Array.isArray(r.shapes)||!Array.isArray(r.lines))throw new Error("Invalid scheme file format");const n=f.fromJSON(r,this.shapeFactory);this.currentScheme.id=`scheme_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,this.currentScheme.name=`${n.name} (imported)`,this.currentScheme.shapes=n.shapes,this.currentScheme.lines=n.lines,this.currentScheme.lastModified=Date.now(),m.info(`Imported "${r.name}" with ${r.shapes.length} shapes and ${r.lines.length} lines`),(l=this.onSuccess)==null||l.call(this,this.currentScheme)}catch(r){const n=r instanceof Error?r:new Error("Import failed");m.error("Import error:",n),(u=this.onError)==null||u.call(this,n)}},i.onerror=()=>{var c;const h=new Error("Failed to read file");m.error("File read error:",h),(c=this.onError)==null||c.call(this,h)},i.readAsText(a)},document.body.appendChild(e),e.click(),document.body.removeChild(e)}undo(){this.mementoForUndo&&this.currentScheme.restoreFromMemento(this.mementoForUndo)}}export{g as ImportFromFileCommand};
