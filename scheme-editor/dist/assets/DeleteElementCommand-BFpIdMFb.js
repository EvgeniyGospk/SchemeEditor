var d=Object.defineProperty;var n=(s,e,t)=>e in s?d(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var i=(s,e,t)=>n(s,typeof e!="symbol"?e+"":e,t);class c{constructor(e,t){i(this,"scheme");i(this,"elementIds");i(this,"deletedShapes",[]);i(this,"deletedLines",[]);this.scheme=e,this.elementIds=Array.isArray(t)?t:[t]}execute(){this.deletedShapes=[],this.deletedLines=[],this.elementIds.forEach(e=>{this.deleteShape(e)||this.deleteLine(e)})}undo(){this.deletedShapes.forEach(e=>this.scheme.addShape(e)),this.deletedLines.forEach(e=>this.scheme.addLine(e))}deleteShape(e){const t=this.scheme.shapes.find(h=>h.getId()===e);return t?(this.deletedShapes.push(t),this.deleteConnectedLines(e),this.scheme.removeShape(e),!0):!1}deleteLine(e){const t=this.scheme.lines.find(h=>h.id===e);return t?(this.deletedLines.push(t),this.scheme.removeLine(e),!0):!1}deleteConnectedLines(e){const t=this.scheme.lines.filter(h=>h.fromShapeId===e||h.toShapeId===e);this.deletedLines.push(...t)}}export{c as DeleteElementCommand};
