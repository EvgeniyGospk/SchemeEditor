var n=Object.defineProperty;var d=(t,e,s)=>e in t?n(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var i=(t,e,s)=>d(t,typeof e!="symbol"?e+"":e,s);class c{constructor(e,s){i(this,"scheme");i(this,"elementIds");i(this,"deletedShapes",[]);i(this,"deletedLines",[]);this.scheme=e,this.elementIds=Array.isArray(s)?s:[s]}execute(){this.deletedShapes=[],this.deletedLines=[],this.elementIds.forEach(e=>{this.deleteShape(e)||this.deleteLine(e)}),this.scheme.notifyObservers()}undo(){this.deletedShapes.forEach(e=>this.scheme.addShape(e)),this.deletedLines.forEach(e=>this.scheme.addLine(e)),this.scheme.notifyObservers()}deleteShape(e){const s=this.scheme.shapes.find(h=>h.getId()===e);return s?(this.deletedShapes.push(s),this.deleteConnectedLines(e),this.scheme.removeShape(e),!0):!1}deleteLine(e){const s=this.scheme.lines.find(h=>h.id===e);return s?(this.deletedLines.push(s),this.scheme.removeLine(e),!0):!1}deleteConnectedLines(e){const s=this.scheme.lines.filter(h=>h.fromShapeId===e||h.toShapeId===e);this.deletedLines.push(...s)}}export{c as DeleteElementCommand};
