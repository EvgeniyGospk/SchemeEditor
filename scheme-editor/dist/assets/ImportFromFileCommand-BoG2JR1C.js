var o=Object.defineProperty;var h=(a,e,r)=>e in a?o(a,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):a[e]=r;var c=(a,e,r)=>h(a,typeof e!="symbol"?e+"":e,r);import{S as l,v as d}from"./index-DKNJtNe6.js";class p{constructor(e,r,t={}){c(this,"currentScheme");c(this,"shapeFactory");c(this,"callbacks");this.currentScheme=e,this.shapeFactory=r,this.callbacks=t}execute(){const e=this.createFileInput();e.onchange=r=>this.handleFileSelection(r),document.body.appendChild(e),e.click(),document.body.removeChild(e)}undo(){}createFileInput(){const e=document.createElement("input");return e.type="file",e.accept=".json",e.style.display="none",e}handleFileSelection(e){var s;const r=(s=e.target.files)==null?void 0:s[0];if(!r)return;const t=new FileReader;t.onload=n=>this.handleFileLoad(n),t.onerror=()=>this.handleError(new Error("Failed to read file")),t.readAsText(r)}handleFileLoad(e){var r,t,s;try{const n=this.parseFileData((r=e.target)==null?void 0:r.result),i=l.fromJSON(n,this.shapeFactory);this.updateCurrentScheme(i),(s=(t=this.callbacks).onSuccess)==null||s.call(t,this.currentScheme)}catch(n){this.handleError(n instanceof Error?n:new Error("Import failed"))}}parseFileData(e){const r=JSON.parse(e);return this.validateSchemeData(r),r}validateSchemeData(e){const r=e;if(!r.id||!r.name||!Array.isArray(r.shapes)||!Array.isArray(r.lines))throw new Error("Invalid scheme file format")}updateCurrentScheme(e){this.currentScheme.id=d(),this.currentScheme.name=`${e.name} (imported)`,this.currentScheme.shapes=e.shapes,this.currentScheme.lines=e.lines,this.currentScheme.lastModified=Date.now()}handleError(e){var r,t;(t=(r=this.callbacks).onError)==null||t.call(r,e)}}export{p as ImportFromFileCommand};
